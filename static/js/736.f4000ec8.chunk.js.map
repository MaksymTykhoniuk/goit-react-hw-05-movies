{"version":3,"file":"static/js/736.f4000ec8.chunk.js","mappings":"0PAEaA,EAAcC,EAAAA,EAAAA,GAAH,0P,GAWAA,EAAAA,EAAAA,GAAH,yQ,QCyCrB,EAhDa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAkBN,GAASO,MAAK,SAAAC,GAC9BJ,EAAaI,EAAKC,KAAKC,OAAO,EAAG,GAClC,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACX,KAGF,+BACGc,EAAAA,EAAAA,SAAQX,IACP,oFAEA,+BACE,SAACL,EAAD,UACGK,EAAUY,KAAI,SAAAC,GACb,IAAIC,EAAS,GAMb,OADEA,EAJGD,EAAME,aAIH,0CAAsCF,EAAME,cAFhD,6JAIF,2BACE,gBACEC,IAAKF,EACLG,IAAG,UAAKJ,EAAMK,MACdC,MAAM,QACNC,OAAO,WAET,uBAAIP,EAAMK,QACV,wBAAKL,EAAMQ,cARJR,EAAMS,GAWlB,SAMZ,C,+LClDKC,EAAM,mCAECC,EAAkB,mCAAG,0FACf,mDADe,SAGTC,EAAAA,EAAAA,IAAA,UAFN,mDAEM,oBAAiCF,IAHxB,cAG1BG,EAH0B,yBAKzBA,EAASC,MALgB,2CAAH,qDAQlBC,EAAiB,mCAAG,WAAMN,GAAN,4HAGRG,EAAAA,EAAAA,IAAA,UAHQ,sCAGR,YAAyBH,EAAzB,oBAAuCC,IAH/B,cAGzBG,EAHyB,yBAKxBA,EAASC,MALe,2CAAH,sDAQjBxB,EAAiB,mCAAG,WAAMmB,GAAN,4HAGRG,EAAAA,EAAAA,IAAA,UAHQ,sCAGR,YAAyBH,EAAzB,4BAA+CC,IAHvC,cAGzBG,EAHyB,yBAKxBA,EAASC,MALe,2CAAH,sDAQjBE,EAAiB,mCAAG,WAAMP,GAAN,4HAGRG,EAAAA,EAAAA,IAAA,UAHQ,sCAGR,YACNH,EADM,4BACgBC,EADhB,YAHQ,cAGzBG,EAHyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBG,EAAiB,mCAAG,WAAMC,GAAN,kIAGRN,EAAAA,EAAAA,IAAA,UAHQ,4CAGR,oBACEF,EADF,kBACeQ,EADf,YAHQ,cAGzBL,EAHyB,yBAOxBA,EAASC,MAPe,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/API.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastWrapper = styled.ul`\n  /* display: flex;\n  gap: 5px; */\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr;\n  gap: 0px 5px;\n  grid-auto-flow: row;\n  grid-template-areas: '. . . . . . . .';\n`;\n\nexport const CastItem = styled.li`\n  /* height: 100%; */\n  display: flex;\n  flex-direction: column;\n  /* min-width: calc((1200px) / 9); */\n  /* min-width: calc((100% - 40px) / 9); */\n  /* flex-basis: calc((100% - 40px) / 9); */\n  /* flex-grow: 0;\n  flex-shrink: 0; */\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieCredits } from 'services/API';\nimport { isEmpty } from 'lodash';\nimport { CastWrapper } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    try {\n      fetchMovieCredits(movieId).then(resp => {\n        setMovieCast(resp.cast.splice(0, 8));\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {isEmpty(movieCast) ? (\n        <p>We don't have any information about cast for this movie</p>\n      ) : (\n        <>\n          <CastWrapper>\n            {movieCast.map(actor => {\n              let source = '';\n              if (!actor.profile_path) {\n                source =\n                  'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n              } else\n                source = `https://image.tmdb.org/t/p/w500/${actor.profile_path}`;\n              return (\n                <li key={actor.id}>\n                  <img\n                    src={source}\n                    alt={`${actor.name}`}\n                    width=\"150px\"\n                    height=\"200px\"\n                  />\n                  <p>{actor.name}</p>\n                  <em>{actor.character}</em>\n                </li>\n              );\n            })}\n          </CastWrapper>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = '851ffe53da79d37b9e7424b9cd604edc';\n\nexport const fetchTrendingMovie = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n  const response = await axios.get(`${BASE_URL}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/`;\n\n  const response = await axios.get(`${BASE_URL}/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/`;\n\n  const response = await axios.get(`${BASE_URL}/${id}/credits?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/`;\n\n  const response = await axios.get(\n    `${BASE_URL}/${id}/reviews?api_key=${KEY}&page=1`\n  );\n\n  return response.data;\n};\n\nexport const fetchMovieByQuery = async query => {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n\n  const response = await axios.get(\n    `${BASE_URL}?api_key=${KEY}&query=${query}&page=1`\n  );\n\n  return response.data;\n};\n"],"names":["CastWrapper","styled","movieId","useParams","useState","movieCast","setMovieCast","useEffect","fetchMovieCredits","then","resp","cast","splice","error","console","log","isEmpty","map","actor","source","profile_path","src","alt","name","width","height","character","id","KEY","fetchTrendingMovie","axios","response","data","fetchMovieDetails","fetchMovieReviews","fetchMovieByQuery","query"],"sourceRoot":""}